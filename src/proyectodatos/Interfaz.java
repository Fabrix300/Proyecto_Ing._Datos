/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectodatos;

import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime; 
import java.sql.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Fabricio
 */
public class Interfaz extends javax.swing.JFrame {
    Connection conn=null;
    String usuario;
    int codigo;
    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();        
    }
    
    public Interfaz(String s, int i) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.usuario=s;
        this.codigo=i;
        txtBienvenida.setText("Bienvenido, "+s);
        try {
            String driverName = "oracle.jdbc.driver.OracleDriver";
            Class.forName(driverName);
            conn = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "administrador", "administrador");
            JOptionPane.showMessageDialog(null, "Conexión Exitosa");
            System.out.println("Conexión Exitosa con la Base de Datos");
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, "No se pudo encontrar el driver de la BD "+ e.getMessage());
            System.out.println("No se pudo encontrar el driver de la BD "+ e.getMessage());   
                
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Intente conexión nuevamente "+ e.getMessage());
            System.out.println("Intente conexión nuevamente "+ e.getMessage());
        }
        fetch();
        fillComboBoxes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtBienvenida = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtNuevaCompe = new javax.swing.JTextField();
        btnNuevaCompe = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtActiv = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        nomCurso = new javax.swing.JComboBox<>();
        btnNuevaActiv = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        nroActiv = new javax.swing.JComboBox<>();
        evalComp = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtNotaAlum = new javax.swing.JTextField();
        alumCalif = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        btnCalificar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        alumEspec = new javax.swing.JComboBox<>();
        btnFiltrarAlumno = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        activsCreadas = new javax.swing.JButton();
        activsCalif = new javax.swing.JButton();
        generarPonderados = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Interfaz");
        setBackground(new java.awt.Color(255, 255, 255));
        setForeground(java.awt.Color.white);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(28, 36, 36));
        jPanel1.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jPanel1ComponentAdded(evt);
            }
        });
        jPanel1.setLayout(null);

        txtBienvenida.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        txtBienvenida.setForeground(new java.awt.Color(153, 153, 153));
        txtBienvenida.setText("Bienvenido Profesor(a)");
        jPanel1.add(txtBienvenida);
        txtBienvenida.setBounds(30, 10, 330, 30);

        jLabel7.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 153, 153));
        jLabel7.setText("Provided by: Grupo 6");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(790, 10, 190, 17);

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(135, 184, 233));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Crear Competencia");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(110, 70, 150, 23);

        txtNuevaCompe.setBackground(new java.awt.Color(153, 153, 153));
        txtNuevaCompe.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtNuevaCompe.setForeground(new java.awt.Color(255, 255, 255));
        txtNuevaCompe.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel1.add(txtNuevaCompe);
        txtNuevaCompe.setBounds(180, 110, 160, 20);

        btnNuevaCompe.setBackground(new java.awt.Color(14, 21, 29));
        btnNuevaCompe.setFont(new java.awt.Font("Open Sans Semibold", 0, 12)); // NOI18N
        btnNuevaCompe.setForeground(new java.awt.Color(255, 255, 255));
        btnNuevaCompe.setText("Aceptar");
        btnNuevaCompe.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        btnNuevaCompe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaCompeActionPerformed(evt);
            }
        });
        jPanel1.add(btnNuevaCompe);
        btnNuevaCompe.setBounds(160, 140, 53, 19);

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(135, 184, 233));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Crear Actividad");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(450, 70, 120, 23);

        jLabel5.setFont(new java.awt.Font("Open Sans Semibold", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Nº de Actividad:");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(380, 110, 100, 20);

        txtActiv.setBackground(new java.awt.Color(153, 153, 153));
        txtActiv.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtActiv.setForeground(new java.awt.Color(51, 51, 51));
        txtActiv.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));
        jPanel1.add(txtActiv);
        txtActiv.setBounds(480, 110, 120, 20);

        jLabel6.setFont(new java.awt.Font("Open Sans Semibold", 0, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Curso:");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(430, 140, 50, 20);

        nomCurso.setBackground(new java.awt.Color(130, 132, 134));
        nomCurso.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        nomCurso.setForeground(new java.awt.Color(255, 255, 255));
        nomCurso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        nomCurso.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel1.add(nomCurso);
        nomCurso.setBounds(480, 140, 122, 22);

        btnNuevaActiv.setBackground(new java.awt.Color(14, 21, 29));
        btnNuevaActiv.setFont(new java.awt.Font("Open Sans Semibold", 0, 12)); // NOI18N
        btnNuevaActiv.setForeground(new java.awt.Color(255, 255, 255));
        btnNuevaActiv.setText("Aceptar");
        btnNuevaActiv.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        btnNuevaActiv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaActivActionPerformed(evt);
            }
        });
        jPanel1.add(btnNuevaActiv);
        btnNuevaActiv.setBounds(480, 170, 53, 19);

        jLabel3.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(135, 184, 233));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Calificar Alumno");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(720, 70, 130, 23);

        jLabel8.setFont(new java.awt.Font("Open Sans Semibold", 0, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Nº Actividad:");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(680, 140, 80, 20);

        nroActiv.setBackground(new java.awt.Color(130, 132, 134));
        nroActiv.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        nroActiv.setForeground(new java.awt.Color(255, 255, 255));
        nroActiv.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "..." }));
        jPanel1.add(nroActiv);
        nroActiv.setBounds(760, 140, 170, 22);

        evalComp.setBackground(new java.awt.Color(130, 132, 134));
        evalComp.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        evalComp.setForeground(new java.awt.Color(255, 255, 255));
        evalComp.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        jPanel1.add(evalComp);
        evalComp.setBounds(760, 170, 170, 22);

        jLabel9.setFont(new java.awt.Font("Open Sans Semibold", 0, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Competencia evaluada:");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(620, 170, 140, 20);

        jLabel10.setFont(new java.awt.Font("Open Sans Semibold", 0, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Nota:");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(720, 200, 40, 20);

        txtNotaAlum.setBackground(new java.awt.Color(153, 153, 153));
        txtNotaAlum.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        txtNotaAlum.setForeground(new java.awt.Color(51, 51, 51));
        txtNotaAlum.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));
        jPanel1.add(txtNotaAlum);
        txtNotaAlum.setBounds(760, 200, 50, 20);

        alumCalif.setBackground(new java.awt.Color(130, 132, 134));
        alumCalif.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        alumCalif.setForeground(new java.awt.Color(255, 255, 255));
        alumCalif.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione..." }));
        jPanel1.add(alumCalif);
        alumCalif.setBounds(760, 110, 170, 22);

        jLabel11.setFont(new java.awt.Font("Open Sans Semibold", 0, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Alumno:");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(700, 110, 60, 20);

        btnCalificar.setBackground(new java.awt.Color(14, 21, 29));
        btnCalificar.setFont(new java.awt.Font("Open Sans Semibold", 0, 12)); // NOI18N
        btnCalificar.setForeground(new java.awt.Color(255, 255, 255));
        btnCalificar.setText("Aceptar");
        btnCalificar.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        btnCalificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalificarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCalificar);
        btnCalificar.setBounds(760, 230, 64, 19);

        jLabel4.setFont(new java.awt.Font("Open Sans Semibold", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Mostrar alumno:");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(20, 290, 110, 20);

        alumEspec.setBackground(new java.awt.Color(130, 132, 134));
        alumEspec.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        alumEspec.setForeground(new java.awt.Color(255, 255, 255));
        alumEspec.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos" }));
        alumEspec.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel1.add(alumEspec);
        alumEspec.setBounds(130, 288, 149, 22);

        btnFiltrarAlumno.setBackground(new java.awt.Color(14, 21, 29));
        btnFiltrarAlumno.setFont(new java.awt.Font("Open Sans Semibold", 0, 12)); // NOI18N
        btnFiltrarAlumno.setForeground(new java.awt.Color(255, 255, 255));
        btnFiltrarAlumno.setText("Mostrar");
        btnFiltrarAlumno.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        btnFiltrarAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrarAlumnoActionPerformed(evt);
            }
        });
        jPanel1.add(btnFiltrarAlumno);
        btnFiltrarAlumno.setBounds(290, 290, 58, 20);

        tabla.setAutoCreateRowSorter(true);
        tabla.setBackground(new java.awt.Color(32, 38, 45));
        tabla.setForeground(new java.awt.Color(255, 255, 255));
        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabla.setToolTipText("");
        tabla.setGridColor(new java.awt.Color(77, 95, 115));
        jScrollPane1.setViewportView(tabla);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(20, 310, 930, 150);

        jLabel12.setFont(new java.awt.Font("Open Sans Semibold", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Nombre de Competencia:");
        jPanel1.add(jLabel12);
        jLabel12.setBounds(30, 110, 150, 20);

        activsCreadas.setBackground(new java.awt.Color(14, 21, 29));
        activsCreadas.setFont(new java.awt.Font("Open Sans Semibold", 0, 12)); // NOI18N
        activsCreadas.setForeground(new java.awt.Color(255, 255, 255));
        activsCreadas.setText("Actividades creadas");
        activsCreadas.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        activsCreadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activsCreadasActionPerformed(evt);
            }
        });
        jPanel1.add(activsCreadas);
        activsCreadas.setBounds(520, 290, 130, 20);

        activsCalif.setBackground(new java.awt.Color(14, 21, 29));
        activsCalif.setFont(new java.awt.Font("Open Sans Semibold", 0, 12)); // NOI18N
        activsCalif.setForeground(new java.awt.Color(255, 255, 255));
        activsCalif.setText("Actividades calificadas");
        activsCalif.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        activsCalif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activsCalifActionPerformed(evt);
            }
        });
        jPanel1.add(activsCalif);
        activsCalif.setBounds(650, 290, 140, 20);

        generarPonderados.setBackground(new java.awt.Color(14, 21, 29));
        generarPonderados.setFont(new java.awt.Font("Open Sans Semibold", 0, 12)); // NOI18N
        generarPonderados.setForeground(new java.awt.Color(255, 255, 255));
        generarPonderados.setText("Calcular Ponderados");
        generarPonderados.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        generarPonderados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarPonderadosActionPerformed(evt);
            }
        });
        jPanel1.add(generarPonderados);
        generarPonderados.setBounds(790, 290, 160, 20);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 974, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(990, 499));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevaCompeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaCompeActionPerformed
        // TODO add your handling code here:
        if (txtNuevaCompe.getText().isEmpty() != true){
            try {
                String query = "INSERT INTO COMPETENCIA(NOM_COMP, COD_PROFESOR) VALUES(?,?)";
                PreparedStatement pst = conn.prepareStatement(query);
                pst.setString(1, txtNuevaCompe.getText());
                pst.setInt(2, codigo);
                pst.executeUpdate();
                JOptionPane.showMessageDialog(null, "Se agregó la competencia correctamente");
                pst.close();
                fillCompetenciasBox();
                txtNuevaCompe.setText("");
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Hubo un problema al obtener al modificar competencias " + e.getStackTrace());
                System.out.println("Hubo un problema al obtener las competencias");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Debe ingresar un nombre para la competencia");
        }
    }//GEN-LAST:event_btnNuevaCompeActionPerformed

    private void btnNuevaActivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaActivActionPerformed
        // TODO add your handling code here:
        if(txtActiv.getText().isEmpty() == true && nomCurso.getSelectedItem().toString() == "Seleccione..."){
            JOptionPane.showMessageDialog(null, "La actividad debe tener un número y pertenecer a un curso");
        } else if(nomCurso.getSelectedItem().toString() == "Seleccione..." && isInt(txtActiv.getText())==true){
            JOptionPane.showMessageDialog(null, "La actividad debe pertenecer a un curso");
        } else if(isInt(txtActiv.getText())!=true && nomCurso.getSelectedItem().toString() != "Seleccione..."){
            JOptionPane.showMessageDialog(null, "El Nº de actividad debe ser un número");
            txtActiv.setText("");
        } else if(isInt(txtActiv.getText())!=true && nomCurso.getSelectedItem().toString() == "Seleccione..."){
            JOptionPane.showMessageDialog(null, "El Nº de actividad debe ser un número y la actividad debe pertenecer a un curso");
            txtActiv.setText("");
        }else if(isInt(txtActiv.getText())==true && nomCurso.getSelectedItem().toString() != "Seleccione..."){
            //Obtener codigo del curso
            int cCurso=0;
            try {
                Statement st = conn.createStatement();
                ResultSet rs = st.executeQuery("SELECT COD_CURSO FROM CURSO WHERE NOMBRE = '"+nomCurso.getSelectedItem().toString()+"'");
                while(rs.next()){
                    cCurso = rs.getInt("COD_CURSO");
                }
                rs.close();
                st.close();
            } catch (SQLException e) {
                System.out.println("Hubo un problema al obtener código de curso");
            }
            // insertamos la actividad
            int nro = Integer.parseInt(txtActiv.getText());
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            LocalDateTime now = LocalDateTime.now();
            String date = dtf.format(now);
            try {
                String query = "INSERT INTO ACTIVIDAD(NRO_ACTIVIDAD, FECHA, COD_PROFESOR, COD_CURSO) VALUES(?,?,?,?)";
                PreparedStatement pst = conn.prepareStatement(query);
                pst.setInt(1, nro);
                pst.setString(2, date);
                pst.setInt(3, codigo);
                pst.setInt(4, cCurso);
                pst.executeUpdate();
                JOptionPane.showMessageDialog(null, "Se agregó la actividad correectamente");
                pst.close();
                fillCompetenciasBox();
                txtNuevaCompe.setText("");
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Hubo un problema al obtener al modificar actividades " + e.getStackTrace());
                System.out.println("Hubo un problema al modificar las actividades");
            }
            fillActividadesBox();
            txtActiv.setText("");
            nomCurso.setSelectedIndex(0);
        }
    }//GEN-LAST:event_btnNuevaActivActionPerformed

    private void btnFiltrarAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrarAlumnoActionPerformed
        // TODO add your handling code here:
        if(alumEspec.getSelectedItem().toString() == "Todos"){
            try {
                Statement st = conn.createStatement();
                ResultSet rs = st.executeQuery("SELECT A.CODIGO_ALUMNO, A.NOM_PILA, A.A_PATERNO, A.PONDERADO " +
                                                "FROM ALUMNO A, acargo_profesor AC " +
                                                "WHERE A.GRADO = AC.GRADO " +
                                                "AND AC.CODIGO_PROFESOR = "+ codigo);
                tabla.setModel(DbUtils.resultSetToTableModel(rs));
                rs.close();
                st.close();
            } catch (SQLException e) {
                System.out.println("Hubo un problema al obtener alumnos");
            }
        } else {
            //OBTENER EL CODIGO DEL ALUMNO
            String str = alumEspec.getSelectedItem().toString();
            String nomAlumno = str.substring(0, str.indexOf(' ')); 
            String apeAlumno = str.substring(str.indexOf(' ')+1);
            int cAlumno = 0;
            try {
                Statement st = conn.createStatement();
                ResultSet rs = st.executeQuery("SELECT CODIGO_ALUMNO FROM ALUMNO WHERE NOM_PILA = '"+nomAlumno+"'"+" AND A_PATERNO = '"+apeAlumno+"'");
                while(rs.next()){
                    cAlumno = rs.getInt("CODIGO_ALUMNO");
                }
                rs.close();
                st.close();
            } catch (SQLException e) {
                System.out.println("Hubo un problema al obtener código del alumno");
            }
            //SELECCIONAR EL ALUMNO
            try {
                Statement st = conn.createStatement();
                ResultSet rs = st.executeQuery("SELECT A.CODIGO_ALUMNO, A.NOM_PILA, A.A_PATERNO, A.PONDERADO " +
                                                "FROM ALUMNO A, acargo_profesor AC " +
                                                "WHERE A.GRADO = AC.GRADO " +
                                                "AND A.CODIGO_ALUMNO = "+cAlumno+
                                                " AND AC.CODIGO_PROFESOR = "+ codigo);
                tabla.setModel(DbUtils.resultSetToTableModel(rs));
                rs.close();
                st.close();
            } catch (SQLException e) {
                System.out.println("Hubo un problema al obtener alumnos");
            }
        }
    }//GEN-LAST:event_btnFiltrarAlumnoActionPerformed

    private void jPanel1ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jPanel1ComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1ComponentAdded

    private void btnCalificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalificarActionPerformed
        // TODO add your handling code here:
        boolean siSeleccion = false;
        if(alumCalif.getSelectedItem().toString() != "Seleccione..." && nroActiv.getSelectedItem().toString() != "..." && evalComp.getSelectedItem().toString() != "Seleccione..."){
            siSeleccion = true;
        }
        if(siSeleccion && isNumeric(txtNotaAlum.getText())){
            // 1. Ingresar datos a tabla REALIZA
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");
            LocalDateTime now = LocalDateTime.now();
            String date = dtf.format(now);
            
            String str = alumCalif.getSelectedItem().toString();
            String nomAlumno = str.substring(0, str.indexOf(' ')); 
            String apeAlumno = str.substring(str.indexOf(' ')+1);
            int cAlumno = 0;
            try {
                Statement st = conn.createStatement();
                ResultSet rs = st.executeQuery("SELECT CODIGO_ALUMNO FROM ALUMNO WHERE NOM_PILA = '"+nomAlumno+"'"+" AND A_PATERNO = '"+apeAlumno+"'");
                while(rs.next()){
                    cAlumno = rs.getInt("CODIGO_ALUMNO");
                }
                rs.close();
                st.close();
            } catch (SQLException e) {
                System.out.println("Hubo un problema al obtener código del alumno");
            }
            try {
                String query = "INSERT INTO REALIZA(FECHA, CODIGO_ALUMNO, NRO_ACTIVIDAD) VALUES(?,?,?)";
                PreparedStatement pst = conn.prepareStatement(query);
                pst.setString(1, date);
                pst.setInt(2, cAlumno);
                pst.setInt(3, Integer.parseInt(nroActiv.getSelectedItem().toString()));
                pst.executeUpdate();
                System.out.println("ingreso a realiza");
                pst.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Hubo un problema al obtener al modificar tabla REALIZAR " + e.getStackTrace());
                System.out.println("Hubo un problema al modificar tabla realizar");
            }
            // 2. Ingresar datos a tabla CALIFICACION
            try {
                String query = "INSERT INTO CALIFICACION(NOTA, NOM_COMP, NRO_ACTIVIDAD, CODIGO_ALUMNO) VALUES(?,?,?,?)";
                PreparedStatement pst = conn.prepareStatement(query);
                pst.setDouble(1, Double.parseDouble(txtNotaAlum.getText()));
                pst.setString(2, evalComp.getSelectedItem().toString());
                pst.setInt(3, Integer.parseInt(nroActiv.getSelectedItem().toString()));
                pst.setInt(4, cAlumno);
                pst.executeUpdate();
                JOptionPane.showMessageDialog(null, "La calificación fue ingresada exitosamente");
                pst.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Hubo un problema al obtener al modificar tabla de Calificaciones " + e.getStackTrace());
                System.out.println("Hubo un problema");
            }
        }else{
            JOptionPane.showMessageDialog(null, "Hubo un error con los datos ingresados");
        }
    }//GEN-LAST:event_btnCalificarActionPerformed

    private void activsCreadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activsCreadasActionPerformed
        // TODO add your handling code here
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT AC.NRO_ACTIVIDAD, C.NOMBRE AS CURSO, AC.FECHA AS FECHA_CREACION " +
                                            "FROM ACTIVIDAD AC, CURSO C " +
                                            "WHERE AC.COD_CURSO = C.COD_CURSO " +
                                            "AND AC.COD_PROFESOR = "+ codigo);
            tabla.setModel(DbUtils.resultSetToTableModel(rs));
            rs.close();
            st.close();
        } catch (SQLException e) {
            System.out.println("Hubo un problema al obtener actividades");
        }
    }//GEN-LAST:event_activsCreadasActionPerformed

    private void activsCalifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activsCalifActionPerformed
        // TODO add your handling code here:
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT A.CODIGO_ALUMNO, A.NOM_PILA, A.A_PATERNO, C.NRO_ACTIVIDAD, C.NOTA, C.NOM_COMP AS NOMBRE_COMPETENCIA, CU.NOMBRE AS CURSO "+
                                           "FROM ALUMNO A, CALIFICACION C, ACTIVIDAD AC, CURSO CU "+
                                           "WHERE A.CODIGO_ALUMNO = C.CODIGO_ALUMNO "+
                                           "AND C.NRO_ACTIVIDAD = AC.NRO_ACTIVIDAD "+
                                           "AND AC.COD_CURSO = CU.COD_CURSO "+
                                           "AND AC.COD_PROFESOR = "+codigo);
            tabla.setModel(DbUtils.resultSetToTableModel(rs));
            rs.close();
            st.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Hubo un problema al obtener datos");
            System.out.println("Hubo un problema al obtener datos");
        }
    }//GEN-LAST:event_activsCalifActionPerformed

    private void generarPonderadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarPonderadosActionPerformed
        // TODO add your handling code here:
        ArrayList<Integer> cCursos = new ArrayList<>();
        ArrayList<Integer> cAlumnos = new ArrayList<>();
        ArrayList<Double> ponderados = new ArrayList<>();
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT COD_CURSO FROM CURSO WHERE NOMBRE IN (SELECT CURSO.NOMBRE FROM ACTIVIDAD, CURSO WHERE actividad.cod_curso = curso.cod_curso)");
            while(rs.next()){
                cCursos.add(rs.getInt("COD_CURSO"));
            }
            rs.close();
            st.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Hubo un problema al obtener datos");
            System.out.println("Hubo un problema al obtener datos");
        }
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT ALUMNO.CODIGO_ALUMNO "+
                                           "FROM ALUMNO, ACARGO_PROFESOR "+
                                           "WHERE ALUMNO.GRADO = ACARGO_PROFESOR.GRADO "+
                                           "AND ACARGO_PROFESOR.CODIGO_PROFESOR = "+codigo);
            while(rs.next()){
                cAlumnos.add(rs.getInt("CODIGO_ALUMNO"));
            }
            rs.close();
            st.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Hubo un problema al obtener datos");
            System.out.println("Hubo un problema al obtener datos");
        }
        for (int i = 0; i < cAlumnos.size(); i++){ 
            ArrayList<Double> ponsCadaCurso = new ArrayList<>();
            for (int j = 0; j < cCursos.size(); j++) {
                ArrayList<Double> notasDeCurso = new ArrayList<>();
                try {
                    Statement st = conn.createStatement();
                    ResultSet rs = st.executeQuery("SELECT ALUMNO.CODIGO_ALUMNO, CALIFICACION.NOTA, ACTIVIDAD.NRO_ACTIVIDAD, CALIFICACION.NOM_COMP, CURSO.NOMBRE "+
                                                   "FROM CALIFICACION, ALUMNO, ACTIVIDAD, CURSO "+
                                                   "WHERE CALIFICACION.CODIGO_ALUMNO = ALUMNO.CODIGO_ALUMNO "+
                                                   "AND CALIFICACION.NRO_ACTIVIDAD =  ACTIVIDAD.NRO_ACTIVIDAD "+
                                                   "AND ACTIVIDAD.COD_CURSO = CURSO.COD_CURSO "+
                                                   "AND ALUMNO.CODIGO_ALUMNO = "+cAlumnos.get(i)+" "+
                                                   "AND CURSO.COD_CURSO = "+cCursos.get(j));
                    while(rs.next()){
                        notasDeCurso.add(rs.getDouble("NOTA"));
                    }
                    rs.close();
                    st.close();
                    Double ponCurso = 0.0;
                    int p = notasDeCurso.size();
                    double cantNotas = p;
                    for (int k = 0; k < p; k++) {
                        ponCurso = ponCurso + ((notasDeCurso.get(k))/ cantNotas);
                    }
                    ponsCadaCurso.add(ponCurso);
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Hubo un problema al obtener datos");
                    System.out.println("Hubo un problema al obtener datos");
                }
            }
            Double pon = 0.0;
            int p = ponsCadaCurso.size();
            double cantNotas = p;
            for (int c = 0; c < p; c++) {
                pon = pon + ((ponsCadaCurso.get(c))/ cantNotas);
            }
            ponderados.add(pon);
        }
        for(int i = 0; i < cAlumnos.size(); i++){
            try {
                String query = "UPDATE ALUMNO " +
                               "SET PONDERADO = " + ponderados.get(i)+" "+
                               "WHERE CODIGO_ALUMNO = "+cAlumnos.get(i)+"";
                PreparedStatement pst = conn.prepareStatement(query);
                pst.executeUpdate();
                System.out.println("Ponderado Actualizado");
                pst.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Hubo un problema al actualizar ponderados " + e.getStackTrace());
                System.out.println("Ponderado no Actualizado");
            }
        }
        JOptionPane.showMessageDialog(null, "Ponderados generados");
    }//GEN-LAST:event_generarPonderadosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }
    
    public static boolean isNumeric(String strNum) {
        if (strNum == null) {
            return false;
        }
        try {
            double d = Double.parseDouble(strNum);
        } catch (NumberFormatException nfe) {
            return false;
        }
        return true;
    }
    
    public static boolean isInt(String s){
        for(int i = 0; i < s.length(); i++){
            if(!Character.isDigit(s.charAt(i))){
                 return false;
            }
        }
        return true;
    }
    
    public void fillActividadesBox(){
        // Eliminamos los anteriores
        nroActiv.removeAllItems();
        String s = "...";
        nroActiv.addItem(s);
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT NRO_ACTIVIDAD FROM ACTIVIDAD "
                                          + "WHERE COD_PROFESOR = "+codigo);
            while (rs.next()) {                
                    String activ = rs.getString("NRO_ACTIVIDAD");
                    nroActiv.addItem(activ);
            }
            rs.close();
        } catch (SQLException e) {
            System.out.println("Hubo un problema al refrescar las actividades");
        }
    }
    
    public void fillCompetenciasBox(){
        // Eliminamos los anteriores
        evalComp.removeAllItems();
        String s = "Seleccione...";
        evalComp.addItem(s);
        // Competencias
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT NOM_COMP FROM COMPETENCIA "
                                          + "WHERE COD_PROFESOR = "+codigo);
            while (rs.next()) {                
                String compe = rs.getString("NOM_COMP");
                evalComp.addItem(compe);
            }
            rs.close();
        } catch (SQLException e) {
            System.out.println("Hubo un problema al refrescar las competencias");
        }
    }
    
    public void fillComboBoxes(){
        // Alumnos
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT A.NOM_PILA, A.A_PATERNO " +
                                            "FROM ALUMNO A, acargo_profesor AC " +
                                            "WHERE A.GRADO = AC.GRADO " +
                                            "AND AC.CODIGO_PROFESOR = "+ codigo);
            while (rs.next()) {                
                String name = rs.getString("NOM_PILA");
                String ape = name + " " + rs.getString("A_PATERNO");
                alumEspec.addItem(ape);
                alumCalif.addItem(ape);
            }
            rs.close();
        } catch (SQLException e) {
            System.out.println("Hubo un problema al obtener alumnos");
        }
        // Competencias
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT NOM_COMP FROM COMPETENCIA "
                                          + "WHERE COD_PROFESOR = "+codigo);
            while (rs.next()) {                
                String compe = rs.getString("NOM_COMP");
                evalComp.addItem(compe);
            }
            rs.close();
        } catch (SQLException e) {
            System.out.println("Hubo un problema al obtener las competencias");
        }
        // Nº Actividad
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT NRO_ACTIVIDAD FROM ACTIVIDAD "
                                          + "WHERE COD_PROFESOR = "+codigo);
            while (rs.next()) {                
                String activ = rs.getString("NRO_ACTIVIDAD");
                nroActiv.addItem(activ);
            }
            rs.close();
        } catch (SQLException e) {
            System.out.println("Hubo un problema al obtener las competencias");
        }
        // Cursos
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT NOMBRE FROM CURSO");
            while (rs.next()) {                
                String curso = rs.getString("NOMBRE");
                nomCurso.addItem(curso);
            }
            rs.close();
        } catch (SQLException e) {
            System.out.println("Hubo un problema al obtener los cursos");
        }
    }
    
    public void fetch(){
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT A.CODIGO_ALUMNO, A.NOM_PILA, A.A_PATERNO, A.PONDERADO " +
                                            "FROM ALUMNO A, acargo_profesor AC " +
                                            "WHERE A.GRADO = AC.GRADO " +
                                            "AND AC.CODIGO_PROFESOR = "+ codigo);
            tabla.setModel(DbUtils.resultSetToTableModel(rs));
            rs.close();
        } catch (SQLException e) {
            System.out.println("Hubo un problema al obtener alumnos");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton activsCalif;
    private javax.swing.JButton activsCreadas;
    private javax.swing.JComboBox<String> alumCalif;
    private javax.swing.JComboBox<String> alumEspec;
    private javax.swing.JButton btnCalificar;
    private javax.swing.JButton btnFiltrarAlumno;
    private javax.swing.JButton btnNuevaActiv;
    private javax.swing.JButton btnNuevaCompe;
    private javax.swing.JComboBox<String> evalComp;
    private javax.swing.JButton generarPonderados;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> nomCurso;
    private javax.swing.JComboBox<String> nroActiv;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField txtActiv;
    private javax.swing.JLabel txtBienvenida;
    private javax.swing.JTextField txtNotaAlum;
    private javax.swing.JTextField txtNuevaCompe;
    // End of variables declaration//GEN-END:variables
}
